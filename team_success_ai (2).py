import streamlit as st
from openai import OpenAI

st.title("–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—Ö–∞ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –ò–ò")
st.subheader("–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–∂–∏–¥–∞–Ω–∏—è –∏ –≤–Ω–µ—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")

api_key = st.text_input("üîë –í–≤–µ–¥–∏—Ç–µ ProxyAPI –∫–ª—é—á", type="password", key="api_key_input")
if api_key:
    st.session_state["api_key"] = api_key
api_key = st.session_state.get("api_key", "")

team = []
deadline = st.selectbox("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞/–ø—Ä–æ–¥—É–∫—Ç–∞", ["", "1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥"], help="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–æ–¥–∏—Ç—Å—è –∫–æ–º–∞–Ω–¥–µ –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.")
expectation = st.selectbox("–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", ["", "–§–∏—á–∞", "MVP", "–ö–æ–Ω—Ü–µ–ø—Ç", "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"], help="–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã.")
description = st.text_area("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", max_chars=500, help="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.")

external_events = [
    "–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
    "—É—Ö–æ–¥–∏—Ç –∫–ª—é—á–µ–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
    "–Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è —Ü–µ–ª—å",
    "–±–æ—Ä—å–±–∞ –¥–≤—É—Ö –ª–∏–¥–µ—Ä–æ–≤",
    "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –æ—Ç QA",
    "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "–ø–µ—Ä–µ–≥—Ä—É–∑ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    "–Ω–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏",
    "—Å–∏–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è",
    "–∏–≥–Ω–æ—Ä –≤ —á–∞—Ç–µ"
]
selected_events = st.multiselect("–í–Ω–µ—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", external_events, help="–°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã.")

num_members = st.number_input("–°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ?", min_value=1, max_value=20, value=5)

roles = ["Product Owner", "Project Manager", "Tech Lead", "Business Analyst", "System Analyst", "Developer", "QA"]
skill_levels = ["junior", "middle", "senior", "–Ω–µ–∞–¥–µ–∫–≤–∞—Ç–µ–Ω"]
behavior_types = ["–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π", "—Ñ–ª–µ–≥–º–∞—Ç–∏—á–Ω—ã–π", "–æ–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π", "—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π", "–º–æ–ª—á–∞–ª–∏–≤—ã–π"]
motivations = ["–≤—ã—Å–æ–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–Ω–∏–∑–∫–∞—è"]

st.markdown("**–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:**")

for i in range(int(num_members)):
    cols = st.columns(4)
    with cols[0]:
        role = st.selectbox("", roles, key=f"role_{i}", help="–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç.–ø.")
    with cols[1]:
        skill = st.selectbox("", skill_levels, key=f"skill_{i}", help="–£—Ä–æ–≤–µ–Ω—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—Ç junior –¥–æ senior –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫.")
    with cols[2]:
        behavior = st.selectbox("", behavior_types, key=f"beh_{i}", help="–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ.")
    with cols[3]:
        motivation = st.selectbox("", motivations, key=f"mot_{i}", help="–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç.")
    team.append({"role": role, "skill": skill, "behavior": behavior, "motivation": motivation})
    st.divider()

if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò"):
    if not api_key:
        st.warning("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        prompt = f"""
–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –≤ IT.

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É, —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞, —Å—Ä–æ–∫–æ–≤ –∏ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
- –£–∫–∞–∂–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–º–∞–Ω–¥—ã.
- –í—ã–¥–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –∑–æ–Ω—ã –≤–Ω–∏–º–∞–Ω–∏—è.
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –Ω–∞ —É—Å–ø–µ—Ö.

–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {description}
–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {deadline}
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expectation}
–í–Ω–µ—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {', '.join(selected_events)}

–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:
        """
        for i, member in enumerate(team, 1):
            prompt += f"\n{i}. –†–æ–ª—å: {member['role']}, –ù–∞–≤—ã–∫: {member['skill']}, –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {member['behavior']}, –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {member['motivation']}"

        with st.spinner("–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ ProxyAPI..."):
            try:
                client = OpenAI(
                    api_key=api_key,
                    base_url="https://api.proxyapi.ru/openai/v1"
                )

                response = client.chat.completions.create(
                    model="gpt-4.1-mini",
                    messages=[
                        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞."},
                        {"role": "user", "content": prompt}
                    ]
                )
                result = response.choices[0].message.content
                st.markdown("### üß† –û—Ç–≤–µ—Ç –ò–ò:")
                st.markdown(result)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ProxyAPI: {e}")
